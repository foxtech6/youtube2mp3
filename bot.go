package main

import (
	"fmt"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"syscall"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
)

type Bot struct {
	api     *tgbotapi.BotAPI
	stats   *Stats
	updates tgbotapi.UpdatesChannel
}

type Stats struct {
	TotalRequests       int64
	SuccessfulDownloads int64
	FailedDownloads     int64
	StartTime           time.Time
}

func NewBot(token string) (*Bot, error) {
	// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram API
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram API: %w", err)
	}

	bot := &Bot{
		api: api,
		stats: &Stats{
			StartTime: time.Now(),
		},
	}

	logrus.Infof("‚úÖ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —è–∫ @%s", api.Self.UserName)
	return bot, nil
}

func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	b.updates = b.api.GetUpdatesChan(u)

	for update := range b.updates {
		if update.Message != nil {
			go b.handleMessage(update.Message)
		}
	}
}

func (b *Bot) Stop() {
	b.api.StopReceivingUpdates()
	b.cleanupTempFiles()
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	defer func() {
		if r := recover(); r != nil {
			logrus.Errorf("Panic –≤ handleMessage: %v", r)
		}
	}()

	chatID := message.Chat.ID
	userID := message.From.ID
	userName := message.From.UserName

	logrus.Infof("üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ %s (%d): %s", userName, userID, message.Text)

	// –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏
	if message.IsCommand() {
		switch message.Command() {
		case "start":
			b.handleStart(chatID, message.From.FirstName)
		case "help":
			b.handleHelp(chatID)
		case "stats":
			b.handleStats(chatID)
		default:
			b.sendMessage(chatID, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.")
		}
		return
	}

	// –û–±—Ä–æ–±–ª—è—î–º–æ URL
	if message.Text != "" {
		b.handleURL(chatID, userID, message.Text)
	}
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"

	if _, err := b.api.Send(msg); err != nil {
		logrus.Errorf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

func (b *Bot) editMessage(chatID int64, messageID int, text string) {
	edit := tgbotapi.NewEditMessageText(chatID, messageID, text)
	edit.ParseMode = "Markdown"

	if _, err := b.api.Send(edit); err != nil {
		logrus.Errorf("–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

func (b *Bot) cleanupTempFiles() {
	pattern := "/tmp/audio_*.mp3"
	matches, err := filepath.Glob(pattern)
	if err != nil {
		return
	}

	for _, file := range matches {
		os.Remove(file)
	}

	logrus.Infof("üßπ –í–∏–¥–∞–ª–µ–Ω–æ %d —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤", len(matches))
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ YouTube URL
func isValidYouTubeURL(url string) bool {
	patterns := []string{
		`^https?://(www\.)?youtube\.com/watch\?v=[a-zA-Z0-9_-]{11}`,
		`^https?://(www\.)?youtu\.be/[a-zA-Z0-9_-]{11}`,
		`^https?://(www\.)?m\.youtube\.com/watch\?v=[a-zA-Z0-9_-]{11}`,
	}

	for _, pattern := range patterns {
		matched, _ := regexp.MatchString(pattern, url)
		if matched {
			return true
		}
	}
	return false
}

// –ó–∞–º—ñ–Ω—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é downloadVideo –≤ bot.go
func (b *Bot) downloadVideo(url string) (string, string, error) {
	filename := fmt.Sprintf("audio_%d", time.Now().Unix())
	outputPath := fmt.Sprintf("/tmp/%s.%%(ext)s", filename)

	// –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ yt-dlp
	cmd := exec.Command("yt-dlp",
		"--extract-audio",
		"--audio-format", "mp3",
		"--audio-quality", "192",
		"--output", outputPath,
		"--no-playlist",
		"--quiet",
		"--no-warnings",
		"--ignore-errors",
		url)

	// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç
	cmd.SysProcAttr = &syscall.SysProcAttr{
		// –î–æ–¥–∞–π—Ç–µ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –û–°
	}

	output, err := cmd.CombinedOutput()
	if err != nil {
		logrus.Errorf("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: %s", string(output))
		return "", "", fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—É–¥—ñ–æ")
	}

	// –®—É–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ñ–∞–π–ª
	mp3File := fmt.Sprintf("/tmp/%s.mp3", filename)
	if _, err := os.Stat(mp3File); os.IsNotExist(err) {
		return "", "", fmt.Errorf("—Ñ–∞–π–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
	}

	// –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∑ —Ñ–∞–π–ª—É
	title := extractTitleFromFilename(mp3File)

	return mp3File, title, nil
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏
func extractTitleFromFilename(filepath string) string {
	base := path.Base(filepath)
	name := strings.TrimSuffix(base, path.Ext(base))
	// –û—á–∏—â—É—î–º–æ –≤—ñ–¥ timestamp
	parts := strings.Split(name, "_")
	if len(parts) > 1 {
		return strings.Join(parts[1:], "_")
	}
	return name
}

// –ó–∞–º—ñ–Ω—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é getVideoInfo –≤ bot.go
func (b *Bot) getVideoInfo(url string) (string, int, error) {
	// –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –≤—ñ–¥–µ–æ
	cmd := exec.Command("yt-dlp",
		"--quiet",
		"--no-warnings",
		"--print", "%(title)s",
		"--print", "%(duration)s",
		"--print", "%(availability)s",
		"--no-playlist",
		url)

	output, err := cmd.CombinedOutput()
	if err != nil {
		logrus.Errorf("yt-dlp –ø–æ–º–∏–ª–∫–∞: %s", string(output))
		return "", 0, fmt.Errorf("–≤—ñ–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∞–±–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ")
	}

	lines := strings.Split(strings.TrimSpace(string(output)), "\n")
	if len(lines) < 2 {
		return "", 0, fmt.Errorf("–Ω–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–µ–æ")
	}

	title := lines[0]
	durationStr := lines[1]

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å (—è–∫—â–æ —î —Ç—Ä–µ—Ç—ñ–π —Ä—è–¥–æ–∫)
	if len(lines) >= 3 && lines[2] != "public" {
		return "", 0, fmt.Errorf("–≤—ñ–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: %s", lines[2])
	}

	// –ü–∞—Ä—Å–∏–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
	duration := parseDuration(durationStr)
	if duration == 0 {
		// –ü—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–±
		duration = parseDurationSeconds(durationStr)
	}

	logrus.Infof("–û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: %s, —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: %d —Å–µ–∫", title, duration)
	return title, duration, nil
}

// –î–æ–¥–∞–π—Ç–µ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Å–µ–∫—É–Ω–¥
func parseDurationSeconds(durationStr string) int {
	// –Ø–∫—â–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "212.5")
	if seconds, err := strconv.ParseFloat(durationStr, 64); err == nil {
		return int(seconds)
	}
	return 0
}

func parseDuration(durationStr string) int {
	parts := strings.Split(durationStr, ":")
	if len(parts) == 2 {
		// MM:SS
		minutes := parseInt(parts[0])
		seconds := parseInt(parts[1])
		return minutes*60 + seconds
	} else if len(parts) == 3 {
		// HH:MM:SS
		hours := parseInt(parts[0])
		minutes := parseInt(parts[1])
		seconds := parseInt(parts[2])
		return hours*3600 + minutes*60 + seconds
	}
	return 0
}

func parseInt(s string) int {
	result := 0
	for _, char := range s {
		if char >= '0' && char <= '9' {
			result = result*10 + int(char-'0')
		}
	}
	return result
}

func formatDuration(seconds int) string {
	minutes := seconds / 60
	secs := seconds % 60
	return fmt.Sprintf("%d:%02d", minutes, secs)
}
